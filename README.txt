# From Time Series to Equations: Sparse Identification of Nonlinear Dynamics in the Cell Cycle

This repository provides code, data, and results for discovering governing equations that capture the dynamics of the early embryonic cell cycle of Xenopus laevis using SINDy-PI (Sparse Identification of Nonlinear Dynamics — Parallel Implicit), discussed in the manuscript "From Time Series to Equations: Sparse Identification of Nonlinear Dynamics in the Cell Cycle". It integrates symbolic model discovery with biological interpretability, including simulations, bifurcation diagrams, sensitivity analysis, and network extraction.


---

##  Folder Structure

<pre><code>
From Time Series to Equations/
├── COPASI_Files/                    # .cps files for COPASI simulations 
├── DAT_Files/                       # .dat outputs generated by XPPAUT
├── Examples_Related/                # .csv/.txt files: symbolic models, term counts, denominator info
├── ODE_Files/                       # .ode files for XPPAUT simulations
├── Plots_/                          # Plot outputs for each example (1,2)
├── Sensivity_Results/               # COPASI sensitivity results and processed data
│   ├── *.txt                        # Raw text outputs
│   ├── *_df_*.csv                   # Parsed DataFrames (raw/scaled)
│   └── txt_data_frame.py            # Utility: parse  .txt -> pandas.DataFrame
├── Dimension_Example_*.ipynb # Dimension estimation required for SINDy using PyTISEAN (Example 1,2)
├── Example_*_implicit_sindy.ipynb   # Main pipelines: simulation, SINDy-PI, network analysis (Example 1,2)
│                                   
├── Example_*_Sensivity.ipynb        # Sensitivity bar plots using parsed COPASI outputs (Example 1,2)
├── Example_*_Bifurcation.ipynb      # # Bifurcation diagrams for each ground-truth model (Example 1,2)
                                   
├── Example_1_Nullclines_Phaseplane.ipynb
│                                     # Nullcline & phase plane plots — Examples 1
├── Example_2_Null_surface.ipynb     # Null surface plots — Example 2
│
├── Ex1_Rational_Bifurcation.ipynb        # Bifurcation for ground-truth (pure) rational model
├── Ex1_Rational_SINDy_Bifurcation.ipynb  # Bifurcation for SINDy-inferred model
├── Ex2_Rational_Bifurcation.ipynb
├── Ex2_Rational_SINDy_Bifurcation.ipynb
│
├── implicit_to_explicit.py         # Convert symbolic implicit models to rational explicit ODEs
├── network_utils.py                # Jacobian-based interaction graph visualization
├── plot_utils.py                   # Common plotting helpers
├── sensitivity_plot_utils.py       # Bar plot utilities for sensitivity results
├── sindypi_functions.py            # Core logic: SINDy-PI model fitting, library, metrics
├── steady_states_utils.py          # Steady state analysis tools
├── symbolic_model_utils.py         # Rational simplification and symbolic processing
├── environment.yml                 # Conda environment definition
└── README.md
</code></pre>

---

## Environment Setup

To reproduce results or run notebooks, install [Miniconda](https://docs.conda.io/en/latest/miniconda.html) or [Anaconda](https://www.anaconda.com/).

Then execute in terminal:

```bash
conda env create -f environment.yml
conda activate sindy_pi
```
This will install all required dependencies into a new environment.

```markdown
---

## Environment Configuration (If Required)

If your system does not recognize environment-installed binaries (e.g., TISEAN, Graphviz, or dot), you can manually append the current Python environment’s bin or Scripts directory to your system PATH at runtime.
Otherwise, consider permanently adding the paths via System Environment Variables.

You can do it programmatically in a notebook or script using:
```python
import os
import sys

# Get the path to the current conda/miniconda environment's Scripts/bin directory
env_bin_path = os.path.dirname(sys.executable)

# Append it to PATH for the current session
os.environ["PATH"] = env_bin_path + os.pathsep + os.environ["PATH"]

```

---


##  Running the Code
Launch Jupyter after activating the environment:

```bash
jupyter notebook
```

Then open and run any of the notebooks.

---

## Notebook Overview

Each `Example_*.ipynb` or `Ex*_.ipynb` corresponds to the four example. Associated notebooks support specialized analysis:

| Notebook                               | Description                                                              |
| -------------------------------------- | ------------------------------------------------------------------------ |
| `Example_*_implicit_sindy.ipynb`       | Main pipeline: simulations, SINDy-PI modeling, symbolic outputs, plots, and interaction network analysis |
| `Example_*_Sensivity.ipynb`            | Parameter sensitivity using COPASI outputs and parsed data                  |
| `Example_*_Bifurcation.ipynb`          | Bifurcation diagrams for each original model  
| `Dimension_Example_*.ipynb`            | Dimension estimation for 1,2                                             |
| `Ex*_Rational_Bifurcation.ipynb`       | Bifurcation from ground-truth rational models                            |
| `Ex*_Rational_SINDy_Bifurcation.ipynb` | Bifurcation from SINDy-PI inferred models                                |
| `Example_1_Nullclines_Phaseplane.ipynb`| Nullcline & phase plane plots for Examples 1                             |
| `Example_2_Null_surface.ipynb`         | Null surface rendering for 3D interactions in Example 2                  |

> **Note**: Each example uses custom feature libraries and specific symbolic structures.

---


##  Dependencies
This project uses **Python 3.10** and the following key packages:

- `pysindy` — for sparse identification of nonlinear dynamical systems
- `sympy` — symbolic mathematics and equation simplification
- `numpy`, `scipy`, `pandas` — core numerical computing and data handling
- `matplotlib`, `seaborn`, `plotly` — for static and interactive visualizations
- `scikit-learn` — for regression and machine learning utilities
- `graphviz` — for visualizing interaction networks
- `pytisean` — for determining dimensions
- `tqdm`, `tqdm.auto` — for progress bars
- `IPython.display` — for rich notebook outputs
- `scipy.optimize` — for numerical optimization and fitting

All dependencies are listed in `environment.yml`.

---

##  Contact

For questions or suggestions, please open an issue on the GitHub repository:  
 [Alka-CBhub/Cell-Cycle-Dynamics-using-SINDyPI](https://github.com/Alka-CBhub/Cell-Cycle-Dynamics-using-SINDyPI)

---